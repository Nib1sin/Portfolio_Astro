---
import Toggle from "./Toggle_Theme_Language.astro";
import Menu from "../icons/Menu.astro";
import ToggleMenuIcon from "../icons/Adjustments.astro";

//Translate
import i18next, { t, changeLanguage } from "i18next";
import { Trans, HeadHrefLangs } from "astro-i18next/components";

const navItems = [
  {
    title: t("header.element_4_tittle"),
    label: "contacto",
    url: t("header.element_4_url"),
  },
  {
    title: t("header.element_1_tittle"),
    label: "experiencia",
    url: t("header.element_1_url"),
  },
  {
    title: t("header.element_2_tittle"),
    label: "proyectos",
    url: t("header.element_2_url"),
  },
  {
    title: t("header.element_3_tittle"),
    label: "sobre-mi",
    url: t("header.element_3_url"),
  },
  {
    title: t("header.element_5_tittle"),
    label: "skills",
    url: t("header.element_5_url"),
  },
];
---

<header
  class="h-14 flex justify-center gap-x-3 items-center mx-auto pt-2 sticky top-0 w-auto md:w-full z-10"
>
  <nav
    class="w-full md:w-3/4 lg:w-1/2 xl:w-2/5 h-full border-2 border-gray-500 rounded-full md:px-6 px-3 py-1 flex flex-wrap items-center justify-between bg-neutral-200/50 dark:bg-black/10 backdrop-blur-2xl"
  >
    <div class="flex items-center">
      <button
        id="menu-toggle"
        class="block md:hidden p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
      >
        <Menu class="h-6 w-6" />
      </button>
      <div
        id="menu"
        class="hidden md:flex flex-col md:flex-row items-center justify-center w-full md:w-auto"
      >
        {
          navItems.map((link) => (
            <a
              class="hover:bg-white/10 p-1 rounded-full px-2 sm:px-3 transition ease-in text-sm sm:text-base capitalize"
              aria-label={link.label}
              href={link.url}
            >
              {link.title}
            </a>
          ))
        }
      </div>
    </div>
    <div class="flex items-center">
      <button
        id="toggle-menu"
        class="block md:hidden p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
      >
        <ToggleMenuIcon class="h-6 w-6" />
      </button>
      <div id="toggle" class="hidden md:flex flex-col md:flex-row items-center">
        <Toggle />
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const menu = document.getElementById("menu");
    const toggleMenu = document.getElementById("toggle-menu");
    const toggle = document.getElementById("toggle");

    if (menuToggle)
      menuToggle.addEventListener("click", () => {
        if (menu) {
          menu.classList.toggle("hidden");
          menu.classList.toggle("flex");
        }
      });

    if (toggleMenu)
      toggleMenu.addEventListener("click", () => {
        if (toggle) {
          toggle.classList.toggle("hidden");
          toggle.classList.toggle("flex");
        }
      });

    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        //console.log(`Section: ${entry.target.id}, IntersectionRatio: ${entry.intersectionRatio}, IsIntersecting: ${entry.isIntersecting}`);
        if (entry.isIntersecting)
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("link-active");
            } else {
              item.classList.remove("link-active");
            }
          });
        else
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.remove("link-active");
            }
          });
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      //threshold: [0.35, 0.5, 0.7, 1],
      threshold: 0.25,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    //Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    transition: box-shadow 0.3s ease-in-out;
  }
  .link-active {
    background-color: shadow-xl; /* Ajusta el color según tu diseño */
  }
  /*
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 400px;
  }
  @keyframes nav-shadown {
    to {
      @apply shadow-xl;
    }
  }
  */
</style>
