---
import SpainFlag from "@/icons/SpainFlag.astro";
import USAFlag from "@/icons/UsaFlag.astro";
import ItalianFlag from "@/icons/ItalianFlag.astro";
import ChevronIcon from "@/icons/chevron.astro";
import EuIcon from "@/icons/Eu.astro";

import SunIcon from "../icons/Sun.astro";
import MoonIcon from "../icons/Moon.astro";
import SystemIcon from "../icons/System.astro";
const THEMES = ["Light", "Dark", "System"];

const { currentLocale = "eu" } = Astro;
const LOCALES: Record<
  string,
  { code: string; name: string; href: string; flag: typeof SpainFlag }
> = {
  en: {
    code: "en",
    href: "/en",
    name: "English",
    flag: USAFlag,
  },
  es: {
    code: "es",
    href: "/es",
    name: "Español",
    flag: SpainFlag,
  },
  it: {
    code: "it",
    href: "/it",
    name: "Italiano",
    flag: ItalianFlag,
  },
  eu: {
    code: "eu",
    href: "/",
    name: "Europe",
    flag: EuIcon,
  },
};

const currentLocaleData = LOCALES[currentLocale];
const otherLocales = Object.values(LOCALES).filter(
  (locale) => locale.code !== currentLocale
);
---

<!--Gestion del Language -->
<div class="relative inline-block text-left">
  <div
    class="group text-white rounded-md text-xs font-semibold bg-black/10 hover:bg-black/70 transition-all"
  >
    <button
      type="button"
      class="inline-flex justify-start items-center w-full gap-x-2 px-3 py-2"
      id="menu-button_lang"
      aria-expanded="true"
      aria-haspopup="true"
    >
      <currentLocaleData.flag />
      {currentLocaleData.code}
      <ChevronIcon />
    </button>
    <ul
      class="group-hover:block group-hover:animate-fade-down group-hover:animate-duration-200 hidden pt-0.5 absolute w-full"
    >
      {
        otherLocales.map((locale) => (
          <li class="">
            <a
              class="lang-menu-option rounded-md bg-black/30 hover:bg-black/70 whitespace-no-wrap inline-flex justify-start items-center w-full gap-x-2 px-3 py-2"
              href={locale.href}
              id={locale.code}
              onclick={`changeLocale(event, '${locale.code}', '${locale.href}')`}
            >
              <locale.flag />
              {locale.code}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<!--Gestion del Theme -->
<div class="relative ml-1 mr-1 pl-2">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex backdrop-blur-xl"
  >
    <span class="sr-only">Elegir Tema</span>
    <SunIcon
      id="light"
      class="theme-toggle-icon size-[1.2rem] transition-all"
    />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-[1.2rem] transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-[1.2rem] transition-all"
    />
  </button>
  <div
    id="themes-menu"
    class="absolute opacity-0 scale-80 top-7 left-7 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/70 dark:bg-gray-900/70 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined")
      return localStorage.getItem("theme") ?? "system";

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const updateTheme = () => {
    if (remove != null) remove();

    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  };

  const applyTheme = (theme) => {
    document.documentElement.classList.add(theme);
  };

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));
  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    themesMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      updateTheme();
    });
  });

  window.addEventListener("popstate", function (event) {
    updateTheme();
  });

  function changeLocale(event, code, href) {
    //console.log("code: " + code);
    event.preventDefault();
    window.location.href = href;
    currentLocaleData = LOCALES[code]; // Actualiza currentLocaleData
    updateIconLang(code); // Llama a updateIconLang después de actualizar currentLocaleData
    updateTheme();
  }

  const updateIconLang = (codePreference) => {
    document.querySelectorAll(".lang-menu-option").forEach((element) => {
      element.style.scale = element.id === codePreference ? "1" : "0";
    });
  };
</script>
